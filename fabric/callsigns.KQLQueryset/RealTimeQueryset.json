{"payload":{"tabs":[{"id":"d203293e-382e-467c-a6bb-a09f55e19ea6","queryRange":{"startLineNumber":1,"startColumn":1,"endLineNumber":12,"endColumn":593},"title":"create bronze","text":".execute database script <|\n.create table BronzeCallsigns (\n    id: string,\n    callsign: string,\n    callsign_icao: string,\n    callsign_iata: string,\n    airline: dynamic,     // Airline entity as nested JSON\n    origin: dynamic,      // Origin Airport as nested JSON\n    destination: dynamic, // Destination Airport as nested JSON\n    valid: bool           // Root level validity boolean\n)\n.create table ['BronzeCallsigns'] ingestion json mapping 'BronzeCallsigns_mapping' '[{\"column\":\"callsign\", \"Properties\":{\"Path\":\"$[\\'callsign\\']\"}},{\"column\":\"callsign_icao\", \"Properties\":{\"Path\":\"$[\\'callsign_icao\\']\"}},{\"column\":\"callsign_iata\", \"Properties\":{\"Path\":\"$[\\'callsign_iata\\']\"}},{\"column\":\"airline\", \"Properties\":{\"Path\":\"$[\\'airline\\']\"}},{\"column\":\"origin\", \"Properties\":{\"Path\":\"$[\\'origin\\']\"}},{\"column\":\"destination\", \"Properties\":{\"Path\":\"$[\\'destination\\']\"}},{\"column\":\"valid\", \"Properties\":{\"Path\":\"$[\\'valid\\']\"}},{\"column\":\"id\", \"Properties\":{\"Path\":\"$[\\'id\\']\"}}]'","commandInContext":".execute database script <|\n.create table BronzeCallsigns (\n    id: string,\n    callsign: string,\n    callsign_icao: string,\n    callsign_iata: string,\n    airline: dynamic,     // Airline entity as nested JSON\n    origin: dynamic,      // Origin Airport as nested JSON\n    destination: dynamic, // Destination Airport as nested JSON\n    valid: bool           // Root level validity boolean\n)\n.create table ['BronzeCallsigns'] ingestion json mapping 'BronzeCallsigns_mapping' '[{\"column\":\"callsign\", \"Properties\":{\"Path\":\"$[\\'callsign\\']\"}},{\"column\":\"callsign_icao\", \"Properties\":{\"Path\":\"$[\\'callsign_icao\\']\"}},{\"column\":\"callsign_iata\", \"Properties\":{\"Path\":\"$[\\'callsign_iata\\']\"}},{\"column\":\"airline\", \"Properties\":{\"Path\":\"$[\\'airline\\']\"}},{\"column\":\"origin\", \"Properties\":{\"Path\":\"$[\\'origin\\']\"}},{\"column\":\"destination\", \"Properties\":{\"Path\":\"$[\\'destination\\']\"}},{\"column\":\"valid\", \"Properties\":{\"Path\":\"$[\\'valid\\']\"}},{\"column\":\"id\", \"Properties\":{\"Path\":\"$[\\'id\\']\"}}]'","executionStatus":"gotFromCache","clientRequestId":"Kusto.Web.RTA.QuerySet;967cde03-d1d8-446a-ad11-a7bd7c9e9cac;532a2c90-86e6-44f1-aa8d-51efe964f997","entityInContext":"trd-kz4sd5vknmz3u5t26m.z2/ac257cd3-e45d-4c3c-a1d8-b4589541f6c8","commandType":"AdminCommand","commandWithoutLeadingComments":".execute database script <|\n.create table BronzeCallsigns (\n    id: string,\n    callsign: string,\n    callsign_icao: string,\n    callsign_iata: string,\n    airline: dynamic,     // Airline entity as nested JSON\n    origin: dynamic,      // Origin Airport as nested JSON\n    destination: dynamic, // Destination Airport as nested JSON\n    valid: bool           // Root level validity boolean\n)\n.create table ['BronzeCallsigns'] ingestion json mapping 'BronzeCallsigns_mapping' '[{\"column\":\"callsign\", \"Properties\":{\"Path\":\"$[\\'callsign\\']\"}},{\"column\":\"callsign_icao\", \"Properties\":{\"Path\":\"$[\\'callsign_icao\\']\"}},{\"column\":\"callsign_iata\", \"Properties\":{\"Path\":\"$[\\'callsign_iata\\']\"}},{\"column\":\"airline\", \"Properties\":{\"Path\":\"$[\\'airline\\']\"}},{\"column\":\"origin\", \"Properties\":{\"Path\":\"$[\\'origin\\']\"}},{\"column\":\"destination\", \"Properties\":{\"Path\":\"$[\\'destination\\']\"}},{\"column\":\"valid\", \"Properties\":{\"Path\":\"$[\\'valid\\']\"}},{\"column\":\"id\", \"Properties\":{\"Path\":\"$[\\'id\\']\"}}]'","hideEmptyColumns":false,"cursorPosition":{"lineNumber":12,"column":593}},{"id":"1b4af6e0-e8b2-4543-bd9b-ceb169d9ab22","queryRange":{"startLineNumber":1,"startColumn":1,"endLineNumber":2,"endColumn":1},"title":"clear bronze","text":".clear table BronzeCallsigns data\n","commandInContext":".clear table BronzeCallsigns data\n","executionStatus":"gotFromCache","clientRequestId":"Kusto.Web.RTA.QuerySet;bd7b9b0f-0501-42d5-8afb-7291a5b9648b;121ede25-1048-475a-bb74-95f18cc70990","entityInContext":"trd-kz4sd5vknmz3u5t26m.z2/ac257cd3-e45d-4c3c-a1d8-b4589541f6c8","commandType":"AdminCommand","commandWithoutLeadingComments":".clear table BronzeCallsigns data","hideEmptyColumns":false,"cursorPosition":{"lineNumber":2,"column":1}},{"id":"3a91b2b8-ba0d-4d75-a697-9603901e34a1","queryRange":{"startLineNumber":1,"startColumn":1,"endLineNumber":94,"endColumn":1},"title":"Create silver","text":".execute database script <|\n.create table SilverCallsigns (\n    callsign_iata: string,       // System.String\n    valid: bool,                 // System.SByte\n    bronze_timestamp: datetime,  // System.DateTime\n    silver_timestamp: datetime,  // System.DateTime\n    airline_name: string,        // System.String\n    airline_icao: string,        // System.String\n    airline_iata: string,        // System.String\n    airline_country: string,     // System.String\n    airline_country_iso: string, // System.String\n    airline_callsign: string,    // System.String\n    origin_country_iso_name: string, // System.String\n    origin_country_name: string, // System.String\n    origin_elevation: real,      // System.Double\n    origin_iata_code: string,    // System.String\n    origin_icao_code: string,    // System.String\n    origin_latitude: real,       // System.Double\n    origin_longitude: real,      // System.Double\n    origin_municipality: string, // System.String\n    origin_name: string,         // System.String\n    destination_country_iso_name: string, // System.String\n    destination_country_name: string, // System.String\n    destination_elevation: real,  // System.Double\n    destination_iata_code: string, // System.String\n    destination_icao_code: string, // System.String\n    destination_latitude: real,   // System.Double\n    destination_longitude: real,  // System.Double\n    destination_municipality: string, // System.String\n    destination_name: string,      // System.String\n    callsign: string,              // System.String\n    geojson_linestring: dynamic,    // System.Object\n    s2: dynamic\n)\n.create-or-alter function with (docstring = \"Transform data from BronzeCallsigns to SilverCallsigns\", folder = \"UpdatePolicy\")\nCallsignsBronzeToSilver()\n{\nlet R = 6371000.0;  // Earth's radius in meters\nlet segments = 50;  // Number of segments\nBronzeCallsigns\n| extend bronze_timestamp = ingestion_time()\n| extend silver_timestamp = now()\n| extend airline_name = tostring(airline.name), airline_icao = tostring(airline.icao), airline_iata = tostring(airline.iata), airline_country = tostring(airline.country), airline_country_iso = tostring(airline.country_iso), airline_callsign = tostring(airline.callsign)\n| project-away airline\n| extend origin_country_iso_name = tostring(origin.country_iso_name), origin_country_name = tostring(origin.country_name), origin_elevation = todouble(origin.elevation), origin_iata_code = tostring(origin.iata_code), origin_icao_code = tostring(origin.icao_code), origin_latitude = todouble(origin.latitude), origin_longitude = todouble(origin.longitude), origin_municipality = tostring(origin.municipality), origin_name = tostring(origin.name)\n| project-away origin\n| extend destination_country_iso_name = tostring(destination.country_iso_name), destination_country_name = tostring(destination.country_name), destination_elevation = todouble(destination.elevation), destination_iata_code = tostring(destination.iata_code), destination_icao_code = tostring(destination.icao_code), destination_latitude = todouble(destination.latitude), destination_longitude = todouble(destination.longitude), destination_municipality = tostring(destination.municipality), destination_name = tostring(destination.name)\n| project-away destination, callsign_icao, callsign\n| extend callsign = id\n| project-away id\n| extend lat1 = todouble(origin_latitude) * pi() / 180  // Convert origin latitude to radians\n| extend lon1 = todouble(origin_longitude) * pi() / 180 // Convert origin longitude to radians\n| extend lat2 = todouble(destination_latitude) * pi() / 180 // Convert destination latitude to radians\n| extend lon2 = todouble(destination_longitude) * pi() / 180 // Convert destination longitude to radians\n| extend dLat = lat2 - lat1 // Latitude difference in radians\n| extend dLon = lon2 - lon1 // Longitude difference in radians\n| extend a = sin(dLat / 2) * sin(dLat / 2) + cos(lat1) * cos(lat2) * sin(dLon / 2) * sin(dLon / 2) // Haversine formula part 1\n| extend centralAngle = 2 * atan2(sqrt(a), sqrt(1 - a)) // Central angle\n| mv-expand segment = range(0, segments, 1) // Generate rows for each segment\n| extend fraction = todouble(segment) / segments // Calculate fraction for each segment\n| extend A = sin((1 - fraction) * centralAngle) / sin(centralAngle) // Weight A for interpolation\n| extend B = sin(fraction * centralAngle) / sin(centralAngle) // Weight B for interpolation\n| extend x = A * cos(lat1) * cos(lon1) + B * cos(lat2) * cos(lon2) // Calculate x coordinate\n| extend y = A * cos(lat1) * sin(lon1) + B * cos(lat2) * sin(lon2) // Calculate y coordinate\n| extend z = A * sin(lat1) + B * sin(lat2) // Calculate z coordinate\n| extend latitude = degrees(atan2(z, sqrt(x * x + y * y))) // Convert latitude back to degrees\n| extend latitude = iif(isnan(latitude), double(null), latitude)\n| extend longitude = degrees(atan2(y, x)) // Convert longitude back to degrees\n| extend longitude = iif(isnan(longitude), double(null), longitude)\n| extend longitude = (longitude + 540) % 360 - 180 // Normalize longitude to -180 to 180\n| project-away lat1, lon1, lat2, lon2, dLat, dLon, a, centralAngle, segment, fraction, A, B, x, y, z\n| evaluate python(\ntypeof(*, geojson_linestring:dynamic),\n```\ndef create_linestring(group):\n    points = [\n        [lon, lat] for lon, lat in zip(group[\"longitude\"], group[\"latitude\"])\n        if isinstance(lon, float) and isinstance(lat, float)\n    ]\n    return {\"type\": \"LineString\", \"coordinates\": points}\n\nresult_linestring = df.groupby(\"callsign\").apply(create_linestring).reset_index()\nresult_linestring.columns = [\"callsign\", \"geojson_linestring\"]\n\nresult = df.groupby(\"callsign\").first().reset_index()\nresult = result.join(result_linestring.set_index(\"callsign\"), on=\"callsign\")\n```\n)\n| project-away latitude, longitude\n| extend s2 = geo_line_to_s2cells(geojson_linestring, 0)\n}\n.alter-merge table SilverCallsigns policy update @'[{\"IsEnabled\": true, \"Source\": \"BronzeCallsigns\", \"Query\": \"CallsignsBronzeToSilver\", \"IsTransactional\": false}]'\n\n\n\n\n","commandInContext":".execute database script <|\n.create table SilverCallsigns (\n    callsign_iata: string,       // System.String\n    valid: bool,                 // System.SByte\n    bronze_timestamp: datetime,  // System.DateTime\n    silver_timestamp: datetime,  // System.DateTime\n    airline_name: string,        // System.String\n    airline_icao: string,        // System.String\n    airline_iata: string,        // System.String\n    airline_country: string,     // System.String\n    airline_country_iso: string, // System.String\n    airline_callsign: string,    // System.String\n    origin_country_iso_name: string, // System.String\n    origin_country_name: string, // System.String\n    origin_elevation: real,      // System.Double\n    origin_iata_code: string,    // System.String\n    origin_icao_code: string,    // System.String\n    origin_latitude: real,       // System.Double\n    origin_longitude: real,      // System.Double\n    origin_municipality: string, // System.String\n    origin_name: string,         // System.String\n    destination_country_iso_name: string, // System.String\n    destination_country_name: string, // System.String\n    destination_elevation: real,  // System.Double\n    destination_iata_code: string, // System.String\n    destination_icao_code: string, // System.String\n    destination_latitude: real,   // System.Double\n    destination_longitude: real,  // System.Double\n    destination_municipality: string, // System.String\n    destination_name: string,      // System.String\n    callsign: string,              // System.String\n    geojson_linestring: dynamic,    // System.Object\n    s2: dynamic\n)\n.create-or-alter function with (docstring = \"Transform data from BronzeCallsigns to SilverCallsigns\", folder = \"UpdatePolicy\")\nCallsignsBronzeToSilver()\n{\nlet R = 6371000.0;  // Earth's radius in meters\nlet segments = 50;  // Number of segments\nBronzeCallsigns\n| extend bronze_timestamp = ingestion_time()\n| extend silver_timestamp = now()\n| extend airline_name = tostring(airline.name), airline_icao = tostring(airline.icao), airline_iata = tostring(airline.iata), airline_country = tostring(airline.country), airline_country_iso = tostring(airline.country_iso), airline_callsign = tostring(airline.callsign)\n| project-away airline\n| extend origin_country_iso_name = tostring(origin.country_iso_name), origin_country_name = tostring(origin.country_name), origin_elevation = todouble(origin.elevation), origin_iata_code = tostring(origin.iata_code), origin_icao_code = tostring(origin.icao_code), origin_latitude = todouble(origin.latitude), origin_longitude = todouble(origin.longitude), origin_municipality = tostring(origin.municipality), origin_name = tostring(origin.name)\n| project-away origin\n| extend destination_country_iso_name = tostring(destination.country_iso_name), destination_country_name = tostring(destination.country_name), destination_elevation = todouble(destination.elevation), destination_iata_code = tostring(destination.iata_code), destination_icao_code = tostring(destination.icao_code), destination_latitude = todouble(destination.latitude), destination_longitude = todouble(destination.longitude), destination_municipality = tostring(destination.municipality), destination_name = tostring(destination.name)\n| project-away destination, callsign_icao, callsign\n| extend callsign = id\n| project-away id\n| extend lat1 = todouble(origin_latitude) * pi() / 180  // Convert origin latitude to radians\n| extend lon1 = todouble(origin_longitude) * pi() / 180 // Convert origin longitude to radians\n| extend lat2 = todouble(destination_latitude) * pi() / 180 // Convert destination latitude to radians\n| extend lon2 = todouble(destination_longitude) * pi() / 180 // Convert destination longitude to radians\n| extend dLat = lat2 - lat1 // Latitude difference in radians\n| extend dLon = lon2 - lon1 // Longitude difference in radians\n| extend a = sin(dLat / 2) * sin(dLat / 2) + cos(lat1) * cos(lat2) * sin(dLon / 2) * sin(dLon / 2) // Haversine formula part 1\n| extend centralAngle = 2 * atan2(sqrt(a), sqrt(1 - a)) // Central angle\n| mv-expand segment = range(0, segments, 1) // Generate rows for each segment\n| extend fraction = todouble(segment) / segments // Calculate fraction for each segment\n| extend A = sin((1 - fraction) * centralAngle) / sin(centralAngle) // Weight A for interpolation\n| extend B = sin(fraction * centralAngle) / sin(centralAngle) // Weight B for interpolation\n| extend x = A * cos(lat1) * cos(lon1) + B * cos(lat2) * cos(lon2) // Calculate x coordinate\n| extend y = A * cos(lat1) * sin(lon1) + B * cos(lat2) * sin(lon2) // Calculate y coordinate\n| extend z = A * sin(lat1) + B * sin(lat2) // Calculate z coordinate\n| extend latitude = degrees(atan2(z, sqrt(x * x + y * y))) // Convert latitude back to degrees\n| extend latitude = iif(isnan(latitude), double(null), latitude)\n| extend longitude = degrees(atan2(y, x)) // Convert longitude back to degrees\n| extend longitude = iif(isnan(longitude), double(null), longitude)\n| extend longitude = (longitude + 540) % 360 - 180 // Normalize longitude to -180 to 180\n| project-away lat1, lon1, lat2, lon2, dLat, dLon, a, centralAngle, segment, fraction, A, B, x, y, z\n| evaluate python(\ntypeof(*, geojson_linestring:dynamic),\n```\ndef create_linestring(group):\n    points = [\n        [lon, lat] for lon, lat in zip(group[\"longitude\"], group[\"latitude\"])\n        if isinstance(lon, float) and isinstance(lat, float)\n    ]\n    return {\"type\": \"LineString\", \"coordinates\": points}\n\nresult_linestring = df.groupby(\"callsign\").apply(create_linestring).reset_index()\nresult_linestring.columns = [\"callsign\", \"geojson_linestring\"]\n\nresult = df.groupby(\"callsign\").first().reset_index()\nresult = result.join(result_linestring.set_index(\"callsign\"), on=\"callsign\")\n```\n)\n| project-away latitude, longitude\n| extend s2 = geo_line_to_s2cells(geojson_linestring, 0)\n}\n.alter-merge table SilverCallsigns policy update @'[{\"IsEnabled\": true, \"Source\": \"BronzeCallsigns\", \"Query\": \"CallsignsBronzeToSilver\", \"IsTransactional\": false}]'\n\n","executionStatus":"gotFromCache","clientRequestId":"Kusto.Web.RTA.QuerySet;daf6685f-5265-4b6d-81c7-c4e1a932a61f;1a318c7c-a881-48e2-a039-106a7b3d737d","entityInContext":"trd-kz4sd5vknmz3u5t26m.z2/ac257cd3-e45d-4c3c-a1d8-b4589541f6c8","commandType":"AdminCommand","commandWithoutLeadingComments":".execute database script <|\n.create table SilverCallsigns (\n    callsign_iata: string,       // System.String\n    valid: bool,                 // System.SByte\n    bronze_timestamp: datetime,  // System.DateTime\n    silver_timestamp: datetime,  // System.DateTime\n    airline_name: string,        // System.String\n    airline_icao: string,        // System.String\n    airline_iata: string,        // System.String\n    airline_country: string,     // System.String\n    airline_country_iso: string, // System.String\n    airline_callsign: string,    // System.String\n    origin_country_iso_name: string, // System.String\n    origin_country_name: string, // System.String\n    origin_elevation: real,      // System.Double\n    origin_iata_code: string,    // System.String\n    origin_icao_code: string,    // System.String\n    origin_latitude: real,       // System.Double\n    origin_longitude: real,      // System.Double\n    origin_municipality: string, // System.String\n    origin_name: string,         // System.String\n    destination_country_iso_name: string, // System.String\n    destination_country_name: string, // System.String\n    destination_elevation: real,  // System.Double\n    destination_iata_code: string, // System.String\n    destination_icao_code: string, // System.String\n    destination_latitude: real,   // System.Double\n    destination_longitude: real,  // System.Double\n    destination_municipality: string, // System.String\n    destination_name: string,      // System.String\n    callsign: string,              // System.String\n    geojson_linestring: dynamic,    // System.Object\n    s2: dynamic\n)\n.create-or-alter function with (docstring = \"Transform data from BronzeCallsigns to SilverCallsigns\", folder = \"UpdatePolicy\")\nCallsignsBronzeToSilver()\n{\nlet R = 6371000.0;  // Earth's radius in meters\nlet segments = 50;  // Number of segments\nBronzeCallsigns\n| extend bronze_timestamp = ingestion_time()\n| extend silver_timestamp = now()\n| extend airline_name = tostring(airline.name), airline_icao = tostring(airline.icao), airline_iata = tostring(airline.iata), airline_country = tostring(airline.country), airline_country_iso = tostring(airline.country_iso), airline_callsign = tostring(airline.callsign)\n| project-away airline\n| extend origin_country_iso_name = tostring(origin.country_iso_name), origin_country_name = tostring(origin.country_name), origin_elevation = todouble(origin.elevation), origin_iata_code = tostring(origin.iata_code), origin_icao_code = tostring(origin.icao_code), origin_latitude = todouble(origin.latitude), origin_longitude = todouble(origin.longitude), origin_municipality = tostring(origin.municipality), origin_name = tostring(origin.name)\n| project-away origin\n| extend destination_country_iso_name = tostring(destination.country_iso_name), destination_country_name = tostring(destination.country_name), destination_elevation = todouble(destination.elevation), destination_iata_code = tostring(destination.iata_code), destination_icao_code = tostring(destination.icao_code), destination_latitude = todouble(destination.latitude), destination_longitude = todouble(destination.longitude), destination_municipality = tostring(destination.municipality), destination_name = tostring(destination.name)\n| project-away destination, callsign_icao, callsign\n| extend callsign = id\n| project-away id\n| extend lat1 = todouble(origin_latitude) * pi() / 180  // Convert origin latitude to radians\n| extend lon1 = todouble(origin_longitude) * pi() / 180 // Convert origin longitude to radians\n| extend lat2 = todouble(destination_latitude) * pi() / 180 // Convert destination latitude to radians\n| extend lon2 = todouble(destination_longitude) * pi() / 180 // Convert destination longitude to radians\n| extend dLat = lat2 - lat1 // Latitude difference in radians\n| extend dLon = lon2 - lon1 // Longitude difference in radians\n| extend a = sin(dLat / 2) * sin(dLat / 2) + cos(lat1) * cos(lat2) * sin(dLon / 2) * sin(dLon / 2) // Haversine formula part 1\n| extend centralAngle = 2 * atan2(sqrt(a), sqrt(1 - a)) // Central angle\n| mv-expand segment = range(0, segments, 1) // Generate rows for each segment\n| extend fraction = todouble(segment) / segments // Calculate fraction for each segment\n| extend A = sin((1 - fraction) * centralAngle) / sin(centralAngle) // Weight A for interpolation\n| extend B = sin(fraction * centralAngle) / sin(centralAngle) // Weight B for interpolation\n| extend x = A * cos(lat1) * cos(lon1) + B * cos(lat2) * cos(lon2) // Calculate x coordinate\n| extend y = A * cos(lat1) * sin(lon1) + B * cos(lat2) * sin(lon2) // Calculate y coordinate\n| extend z = A * sin(lat1) + B * sin(lat2) // Calculate z coordinate\n| extend latitude = degrees(atan2(z, sqrt(x * x + y * y))) // Convert latitude back to degrees\n| extend latitude = iif(isnan(latitude), double(null), latitude)\n| extend longitude = degrees(atan2(y, x)) // Convert longitude back to degrees\n| extend longitude = iif(isnan(longitude), double(null), longitude)\n| extend longitude = (longitude + 540) % 360 - 180 // Normalize longitude to -180 to 180\n| project-away lat1, lon1, lat2, lon2, dLat, dLon, a, centralAngle, segment, fraction, A, B, x, y, z\n| evaluate python(\ntypeof(*, geojson_linestring:dynamic),\n```\ndef create_linestring(group):\n    points = [\n        [lon, lat] for lon, lat in zip(group[\"longitude\"], group[\"latitude\"])\n        if isinstance(lon, float) and isinstance(lat, float)\n    ]\n    return {\"type\": \"LineString\", \"coordinates\": points}\n\nresult_linestring = df.groupby(\"callsign\").apply(create_linestring).reset_index()\nresult_linestring.columns = [\"callsign\", \"geojson_linestring\"]\n\nresult = df.groupby(\"callsign\").first().reset_index()\nresult = result.join(result_linestring.set_index(\"callsign\"), on=\"callsign\")\n```\n)\n| project-away latitude, longitude\n| extend s2 = geo_line_to_s2cells(geojson_linestring, 0)\n}\n.alter-merge table SilverCallsigns policy update @'[{\"IsEnabled\": true, \"Source\": \"BronzeCallsigns\", \"Query\": \"CallsignsBronzeToSilver\", \"IsTransactional\": false}]'","hideEmptyColumns":false,"cursorPosition":{"lineNumber":38,"column":19}},{"id":"2befc862-d330-43ff-b336-746011de598c","queryRange":{"startLineNumber":1,"startColumn":1,"endLineNumber":4,"endColumn":165},"title":"Clear silver","text":".execute database script <|\n.clear table SilverCallsigns data\n.delete table SilverCallsigns policy update\n.alter-merge table SilverCallsigns policy update @'[{\"IsEnabled\": true, \"Source\": \"BronzeCallsigns\", \"Query\": \"CallsignsBronzeToSilver\", \"IsTransactional\": false}]'","commandInContext":".execute database script <|\n.clear table SilverCallsigns data\n.delete table SilverCallsigns policy update\n.alter-merge table SilverCallsigns policy update @'[{\"IsEnabled\": true, \"Source\": \"BronzeCallsigns\", \"Query\": \"CallsignsBronzeToSilver\", \"IsTransactional\": false}]'","executionStatus":"gotFromCache","clientRequestId":"Kusto.Web.RTA.QuerySet;daf6685f-5265-4b6d-81c7-c4e1a932a61f;9c9fe226-6654-44ec-b7bb-5e55450cfbc0","entityInContext":"trd-kz4sd5vknmz3u5t26m.z2/ac257cd3-e45d-4c3c-a1d8-b4589541f6c8","commandType":"AdminCommand","commandWithoutLeadingComments":".execute database script <|\n.clear table SilverCallsigns data\n.delete table SilverCallsigns policy update\n.alter-merge table SilverCallsigns policy update @'[{\"IsEnabled\": true, \"Source\": \"BronzeCallsigns\", \"Query\": \"CallsignsBronzeToSilver\", \"IsTransactional\": false}]'","hideEmptyColumns":false,"cursorPosition":{"lineNumber":4,"column":165}},{"id":"e8015e16-33a0-4700-8132-8eaa6f7c050b","queryRange":{"startLineNumber":1,"startColumn":1,"endLineNumber":7,"endColumn":2},"title":"ValidCallsigns view","text":".create-or-alter function with (docstring = \"Preprocessed view filtering valid callsigns and renaming common columns.\", folder = \"View\")\nvalid_callsigns() {\nSilverCallsigns\n| where valid\n| project-away valid\n| project-rename callsigns_bronze_timestamp=bronze_timestamp, callsigns_silver_timestamp=silver_timestamp\n}","commandInContext":"docstring = \"Preprocessed view filtering valid callsigns and renaming common columns.\"","executionStatus":"gotFromCache","clientRequestId":"Kusto.Web.RTA.QuerySet;bd7b9b0f-0501-42d5-8afb-7291a5b9648b;8bdf4a77-7234-4628-9569-30d617da1127","entityInContext":"trd-kz4sd5vknmz3u5t26m.z2/ac257cd3-e45d-4c3c-a1d8-b4589541f6c8","commandType":"Query","commandWithoutLeadingComments":"docstring = \"Preprocessed view filtering valid callsigns and renaming common columns.\"","hideEmptyColumns":false,"cursorPosition":{"lineNumber":1,"column":119}},{"id":"a0910b81-5912-479a-858a-16f2dd7a338e","queryRange":{"startLineNumber":1,"startColumn":1,"endLineNumber":2,"endColumn":34},"title":"exploration","text":"SilverCallsigns\n| summarize max(bronze_timestamp)","commandInContext":"SilverCallsigns\n| summarize max(bronze_timestamp)","executionStatus":"gotFromCache","clientRequestId":"Kusto.Web.RTA.QuerySet;967cde03-d1d8-446a-ad11-a7bd7c9e9cac;699eb796-e3dd-47e3-9a0d-25d17645e6e6","entityInContext":"trd-kz4sd5vknmz3u5t26m.z2/ac257cd3-e45d-4c3c-a1d8-b4589541f6c8","commandType":"Query","commandWithoutLeadingComments":"SilverCallsigns\n| summarize max(bronze_timestamp)","hideEmptyColumns":false,"cursorPosition":{"lineNumber":2,"column":34}},{"id":"36b41ef5-a3d1-4fb7-9edc-8e2956ea7555","queryRange":{"startLineNumber":1,"startColumn":1,"endLineNumber":32,"endColumn":1},"title":"create silver old","text":".create-or-alter materialized-view with (backfill=true) SilverCallsigns on table BronzeCallsigns{\nBronzeCallsigns\n| extend bronze_timestamp = ingestion_time()\n| extend silver_timestamp = now()\n| extend airline_name = tostring(airline.name), airline_icao = tostring(airline.icao), airline_iata = tostring(airline.iata), airline_country = tostring(airline.country), airline_country_iso = tostring(airline.country_iso), airline_callsign = tostring(airline.callsign)\n| project-away airline\n| extend origin_country_iso_name = tostring(origin.country_iso_name),\n         origin_country_name = tostring(origin.country_name),\n         origin_elevation = todouble(origin.elevation),\n         origin_iata_code = tostring(origin.iata_code),\n         origin_icao_code = tostring(origin.icao_code),\n         origin_latitude = todouble(origin.latitude),\n         origin_longitude = todouble(origin.longitude),\n         origin_municipality = tostring(origin.municipality),\n         origin_name = tostring(origin.name)\n| project-away origin\n| extend destination_country_iso_name = tostring(destination.country_iso_name),\n         destination_country_name = tostring(destination.country_name),\n         destination_elevation = todouble(destination.elevation),\n         destination_iata_code = tostring(destination.iata_code),\n         destination_icao_code = tostring(destination.icao_code),\n         destination_latitude = todouble(destination.latitude),\n         destination_longitude = todouble(destination.longitude),\n         destination_municipality = tostring(destination.municipality),\n         destination_name = tostring(destination.name)\n| project-away destination, callsign_icao, callsign\n| extend callsign = id\n| project-away id\n| summarize arg_max(bronze_timestamp, *) by callsign\n}\n\nSilverCallsigns\n| take 10 \n","commandInContext":".create-or-alter materialized-view with (backfill=true) SilverCallsigns on table BronzeCallsigns{\nBronzeCallsigns\n| extend bronze_timestamp = ingestion_time()\n| extend silver_timestamp = now()\n| extend airline_name = tostring(airline.name), airline_icao = tostring(airline.icao), airline_iata = tostring(airline.iata), airline_country = tostring(airline.country), airline_country_iso = tostring(airline.country_iso), airline_callsign = tostring(airline.callsign)\n| project-away airline\n| extend origin_country_iso_name = tostring(origin.country_iso_name),\n         origin_country_name = tostring(origin.country_name),\n         origin_elevation = todouble(origin.elevation),\n         origin_iata_code = tostring(origin.iata_code),\n         origin_icao_code = tostring(origin.icao_code),\n         origin_latitude = todouble(origin.latitude),\n         origin_longitude = todouble(origin.longitude),\n         origin_municipality = tostring(origin.municipality),\n         origin_name = tostring(origin.name)\n| project-away origin\n| extend destination_country_iso_name = tostring(destination.country_iso_name),\n         destination_country_name = tostring(destination.country_name),\n         destination_elevation = todouble(destination.elevation),\n         destination_iata_code = tostring(destination.iata_code),\n         destination_icao_code = tostring(destination.icao_code),\n         destination_latitude = todouble(destination.latitude),\n         destination_longitude = todouble(destination.longitude),\n         destination_municipality = tostring(destination.municipality),\n         destination_name = tostring(destination.name)\n| project-away destination, callsign_icao, callsign\n| extend callsign = id\n| project-away id\n| summarize arg_max(bronze_timestamp, *) by callsign\n}\n\n","executionStatus":"done","clientRequestId":"Kusto.Web.RTA.QuerySet;1cd35933-cccc-462f-b468-933b5e36460d;9f50c679-f1ea-44de-b44d-69b826c34545","entityInContext":"trd-kz4sd5vknmz3u5t26m.z2/ac257cd3-e45d-4c3c-a1d8-b4589541f6c8","commandType":"AdminCommand","commandWithoutLeadingComments":".create-or-alter materialized-view with (backfill=true) SilverCallsigns on table BronzeCallsigns{\nBronzeCallsigns\n| extend bronze_timestamp = ingestion_time()\n| extend silver_timestamp = now()\n| extend airline_name = tostring(airline.name), airline_icao = tostring(airline.icao), airline_iata = tostring(airline.iata), airline_country = tostring(airline.country), airline_country_iso = tostring(airline.country_iso), airline_callsign = tostring(airline.callsign)\n| project-away airline\n| extend origin_country_iso_name = tostring(origin.country_iso_name),\n         origin_country_name = tostring(origin.country_name),\n         origin_elevation = todouble(origin.elevation),\n         origin_iata_code = tostring(origin.iata_code),\n         origin_icao_code = tostring(origin.icao_code),\n         origin_latitude = todouble(origin.latitude),\n         origin_longitude = todouble(origin.longitude),\n         origin_municipality = tostring(origin.municipality),\n         origin_name = tostring(origin.name)\n| project-away origin\n| extend destination_country_iso_name = tostring(destination.country_iso_name),\n         destination_country_name = tostring(destination.country_name),\n         destination_elevation = todouble(destination.elevation),\n         destination_iata_code = tostring(destination.iata_code),\n         destination_icao_code = tostring(destination.icao_code),\n         destination_latitude = todouble(destination.latitude),\n         destination_longitude = todouble(destination.longitude),\n         destination_municipality = tostring(destination.municipality),\n         destination_name = tostring(destination.name)\n| project-away destination, callsign_icao, callsign\n| extend callsign = id\n| project-away id\n| summarize arg_max(bronze_timestamp, *) by callsign\n}","hideEmptyColumns":false,"cursorPosition":{"lineNumber":29,"column":1}},{"id":"7c36639e-741a-4b92-a07d-4528b6a5f67a","queryRange":{"startLineNumber":1,"startColumn":1,"endLineNumber":1,"endColumn":40},"title":"clear silver old","text":".drop materialized-view SilverCallsigns","commandInContext":".drop materialized-view SilverCallsigns","executionStatus":"gotFromCache","clientRequestId":"Kusto.Web.RTA.QuerySet;967cde03-d1d8-446a-ad11-a7bd7c9e9cac;14c17e2c-5b6e-4dc8-943c-3aaf9658e2b2","entityInContext":"trd-kz4sd5vknmz3u5t26m.z2/ac257cd3-e45d-4c3c-a1d8-b4589541f6c8","commandType":"AdminCommand","commandWithoutLeadingComments":".drop materialized-view SilverCallsigns","hideEmptyColumns":false,"cursorPosition":{"lineNumber":1,"column":40}},{"id":"aa7b971c-6fef-4864-84be-40f6d0e1f062","queryRange":{"startLineNumber":1,"startColumn":1,"endLineNumber":42,"endColumn":1},"title":"trajectory david old","text":".create-or-alter materialized-view GoldCallsigns on materialized-view SilverCallsigns {\nlet R = 6371000.0;  // Earth's radius in meters\nlet segments = 50;  // Number of segments\nSilverCallsigns\n| where valid\n| where todouble(origin_latitude) != todouble(destination_latitude)\n       or todouble(origin_longitude) != todouble(destination_longitude) // Ensure origin and destination are not the same\n| extend lat1 = todouble(origin_latitude) * pi() / 180  // Convert origin latitude to radians\n| extend lon1 = todouble(origin_longitude) * pi() / 180 // Convert origin longitude to radians\n| extend lat2 = todouble(destination_latitude) * pi() / 180 // Convert destination latitude to radians\n| extend lon2 = todouble(destination_longitude) * pi() / 180 // Convert destination longitude to radians\n| extend dLat = lat2 - lat1 // Latitude difference in radians\n| extend dLon = lon2 - lon1 // Longitude difference in radians\n| extend a = sin(dLat / 2) * sin(dLat / 2) + cos(lat1) * cos(lat2) * sin(dLon / 2) * sin(dLon / 2) // Haversine formula part 1\n| extend centralAngle = 2 * atan2(sqrt(a), sqrt(1 - a)) // Central angle\n| mv-expand segment = range(0, segments, 1) // Generate rows for each segment\n| extend fraction = todouble(segment) / segments // Calculate fraction for each segment\n| extend A = sin((1 - fraction) * centralAngle) / sin(centralAngle) // Weight A for interpolation\n| extend B = sin(fraction * centralAngle) / sin(centralAngle) // Weight B for interpolation\n| extend x = A * cos(lat1) * cos(lon1) + B * cos(lat2) * cos(lon2) // Calculate x coordinate\n| extend y = A * cos(lat1) * sin(lon1) + B * cos(lat2) * sin(lon2) // Calculate y coordinate\n| extend z = A * sin(lat1) + B * sin(lat2) // Calculate z coordinate\n| extend latitude = degrees(atan2(z, sqrt(x * x + y * y))) // Convert latitude back to degrees\n| extend longitude = degrees(atan2(y, x)) // Convert longitude back to degrees\n| extend longitude = (longitude + 540) % 360 - 180 // Normalize longitude to -180 to 180\n| project-away lat1, lon1, lat2, lon2, dLat, dLon, a, centralAngle, segment, fraction, A, B, x, y, z\n| evaluate hint.distribution=per_node python(\n    typeof(*, geojson_linestring:dynamic),\n```\ndef create_linestring(group):\n    points = [[lon, lat] for lon, lat in zip(group[\"longitude\"], group[\"latitude\"])]\n    return {\"type\": \"LineString\", \"coordinates\": points}\nresult_linestring = df.groupby(\"callsign\").apply(create_linestring).reset_index()\nresult_linestring.columns = [\"callsign\", \"geojson_linestring\"]\nresult = df.groupby(\"callsign\").first().reset_index()\nresult = result.join(result_linestring.set_index(\"callsign\"), on=\"callsign\")\n```)\n| project-away latitude, longitude\n| extend gold_timestamp = now()\n| summarize arg_max(bronze_timestamp, *) by callsign\n}\n","commandInContext":".create-or-alter materialized-view GoldCallsigns on materialized-view SilverCallsigns {\nlet R = 6371000.0;  // Earth's radius in meters\nlet segments = 50;  // Number of segments\nSilverCallsigns\n| where valid\n| where todouble(origin_latitude) != todouble(destination_latitude)\n       or todouble(origin_longitude) != todouble(destination_longitude) // Ensure origin and destination are not the same\n| extend lat1 = todouble(origin_latitude) * pi() / 180  // Convert origin latitude to radians\n| extend lon1 = todouble(origin_longitude) * pi() / 180 // Convert origin longitude to radians\n| extend lat2 = todouble(destination_latitude) * pi() / 180 // Convert destination latitude to radians\n| extend lon2 = todouble(destination_longitude) * pi() / 180 // Convert destination longitude to radians\n| extend dLat = lat2 - lat1 // Latitude difference in radians\n| extend dLon = lon2 - lon1 // Longitude difference in radians\n| extend a = sin(dLat / 2) * sin(dLat / 2) + cos(lat1) * cos(lat2) * sin(dLon / 2) * sin(dLon / 2) // Haversine formula part 1\n| extend centralAngle = 2 * atan2(sqrt(a), sqrt(1 - a)) // Central angle\n| mv-expand segment = range(0, segments, 1) // Generate rows for each segment\n| extend fraction = todouble(segment) / segments // Calculate fraction for each segment\n| extend A = sin((1 - fraction) * centralAngle) / sin(centralAngle) // Weight A for interpolation\n| extend B = sin(fraction * centralAngle) / sin(centralAngle) // Weight B for interpolation\n| extend x = A * cos(lat1) * cos(lon1) + B * cos(lat2) * cos(lon2) // Calculate x coordinate\n| extend y = A * cos(lat1) * sin(lon1) + B * cos(lat2) * sin(lon2) // Calculate y coordinate\n| extend z = A * sin(lat1) + B * sin(lat2) // Calculate z coordinate\n| extend latitude = degrees(atan2(z, sqrt(x * x + y * y))) // Convert latitude back to degrees\n| extend longitude = degrees(atan2(y, x)) // Convert longitude back to degrees\n| extend longitude = (longitude + 540) % 360 - 180 // Normalize longitude to -180 to 180\n| project-away lat1, lon1, lat2, lon2, dLat, dLon, a, centralAngle, segment, fraction, A, B, x, y, z\n| evaluate hint.distribution=per_node python(\n    typeof(*, geojson_linestring:dynamic),\n```\ndef create_linestring(group):\n    points = [[lon, lat] for lon, lat in zip(group[\"longitude\"], group[\"latitude\"])]\n    return {\"type\": \"LineString\", \"coordinates\": points}\nresult_linestring = df.groupby(\"callsign\").apply(create_linestring).reset_index()\nresult_linestring.columns = [\"callsign\", \"geojson_linestring\"]\nresult = df.groupby(\"callsign\").first().reset_index()\nresult = result.join(result_linestring.set_index(\"callsign\"), on=\"callsign\")\n```)\n| project-away latitude, longitude\n| extend gold_timestamp = now()\n| summarize arg_max(bronze_timestamp, *) by callsign\n}\n","executionStatus":"failed","clientRequestId":"Kusto.Web.RTA.QuerySet;1cd35933-cccc-462f-b468-933b5e36460d;f0484cb4-044a-41d5-a20e-a744cae69fb9","entityInContext":"trd-kz4sd5vknmz3u5t26m.z2/ac257cd3-e45d-4c3c-a1d8-b4589541f6c8","commandType":"AdminCommand","commandWithoutLeadingComments":".create-or-alter materialized-view GoldCallsigns on materialized-view SilverCallsigns {\nlet R = 6371000.0;  // Earth's radius in meters\nlet segments = 50;  // Number of segments\nSilverCallsigns\n| where valid\n| where todouble(origin_latitude) != todouble(destination_latitude)\n       or todouble(origin_longitude) != todouble(destination_longitude) // Ensure origin and destination are not the same\n| extend lat1 = todouble(origin_latitude) * pi() / 180  // Convert origin latitude to radians\n| extend lon1 = todouble(origin_longitude) * pi() / 180 // Convert origin longitude to radians\n| extend lat2 = todouble(destination_latitude) * pi() / 180 // Convert destination latitude to radians\n| extend lon2 = todouble(destination_longitude) * pi() / 180 // Convert destination longitude to radians\n| extend dLat = lat2 - lat1 // Latitude difference in radians\n| extend dLon = lon2 - lon1 // Longitude difference in radians\n| extend a = sin(dLat / 2) * sin(dLat / 2) + cos(lat1) * cos(lat2) * sin(dLon / 2) * sin(dLon / 2) // Haversine formula part 1\n| extend centralAngle = 2 * atan2(sqrt(a), sqrt(1 - a)) // Central angle\n| mv-expand segment = range(0, segments, 1) // Generate rows for each segment\n| extend fraction = todouble(segment) / segments // Calculate fraction for each segment\n| extend A = sin((1 - fraction) * centralAngle) / sin(centralAngle) // Weight A for interpolation\n| extend B = sin(fraction * centralAngle) / sin(centralAngle) // Weight B for interpolation\n| extend x = A * cos(lat1) * cos(lon1) + B * cos(lat2) * cos(lon2) // Calculate x coordinate\n| extend y = A * cos(lat1) * sin(lon1) + B * cos(lat2) * sin(lon2) // Calculate y coordinate\n| extend z = A * sin(lat1) + B * sin(lat2) // Calculate z coordinate\n| extend latitude = degrees(atan2(z, sqrt(x * x + y * y))) // Convert latitude back to degrees\n| extend longitude = degrees(atan2(y, x)) // Convert longitude back to degrees\n| extend longitude = (longitude + 540) % 360 - 180 // Normalize longitude to -180 to 180\n| project-away lat1, lon1, lat2, lon2, dLat, dLon, a, centralAngle, segment, fraction, A, B, x, y, z\n| evaluate hint.distribution=per_node python(\n    typeof(*, geojson_linestring:dynamic),\n```\ndef create_linestring(group):\n    points = [[lon, lat] for lon, lat in zip(group[\"longitude\"], group[\"latitude\"])]\n    return {\"type\": \"LineString\", \"coordinates\": points}\nresult_linestring = df.groupby(\"callsign\").apply(create_linestring).reset_index()\nresult_linestring.columns = [\"callsign\", \"geojson_linestring\"]\nresult = df.groupby(\"callsign\").first().reset_index()\nresult = result.join(result_linestring.set_index(\"callsign\"), on=\"callsign\")\n```)\n| project-away latitude, longitude\n| extend gold_timestamp = now()\n| summarize arg_max(bronze_timestamp, *) by callsign\n}","hideEmptyColumns":false,"cursorPosition":{"lineNumber":23,"column":19}},{"id":"7c920204-9dec-4f17-8320-a44969b4aac9","queryRange":{"startLineNumber":1,"startColumn":1,"endLineNumber":52,"endColumn":35},"title":"exploration","text":"let R = 6371000.0;  // Earth's radius in meters\nlet segments = 50;  // Number of segments\nBronzeCallsigns\n| extend bronze_timestamp = ingestion_time()\n| extend silver_timestamp = now()\n| extend airline_name = tostring(airline.name), airline_icao = tostring(airline.icao), airline_iata = tostring(airline.iata), airline_country = tostring(airline.country), airline_country_iso = tostring(airline.country_iso), airline_callsign = tostring(airline.callsign)\n| project-away airline\n| extend origin_country_iso_name = tostring(origin.country_iso_name), origin_country_name = tostring(origin.country_name), origin_elevation = todouble(origin.elevation), origin_iata_code = tostring(origin.iata_code), origin_icao_code = tostring(origin.icao_code), origin_latitude = todouble(origin.latitude), origin_longitude = todouble(origin.longitude), origin_municipality = tostring(origin.municipality), origin_name = tostring(origin.name)\n| project-away origin\n| extend destination_country_iso_name = tostring(destination.country_iso_name), destination_country_name = tostring(destination.country_name), destination_elevation = todouble(destination.elevation), destination_iata_code = tostring(destination.iata_code), destination_icao_code = tostring(destination.icao_code), destination_latitude = todouble(destination.latitude), destination_longitude = todouble(destination.longitude), destination_municipality = tostring(destination.municipality), destination_name = tostring(destination.name)\n| project-away destination, callsign_icao, callsign\n| extend callsign = id\n| project-away id\n| extend lat1 = todouble(origin_latitude) * pi() / 180  // Convert origin latitude to radians\n| extend lon1 = todouble(origin_longitude) * pi() / 180 // Convert origin longitude to radians\n| extend lat2 = todouble(destination_latitude) * pi() / 180 // Convert destination latitude to radians\n| extend lon2 = todouble(destination_longitude) * pi() / 180 // Convert destination longitude to radians\n| extend dLat = lat2 - lat1 // Latitude difference in radians\n| extend dLon = lon2 - lon1 // Longitude difference in radians\n| extend a = sin(dLat / 2) * sin(dLat / 2) + cos(lat1) * cos(lat2) * sin(dLon / 2) * sin(dLon / 2) // Haversine formula part 1\n| extend centralAngle = 2 * atan2(sqrt(a), sqrt(1 - a)) // Central angle\n| mv-expand segment = range(0, segments, 1) // Generate rows for each segment\n| extend fraction = todouble(segment) / segments // Calculate fraction for each segment\n| extend A = sin((1 - fraction) * centralAngle) / sin(centralAngle) // Weight A for interpolation\n| extend B = sin(fraction * centralAngle) / sin(centralAngle) // Weight B for interpolation\n| extend x = A * cos(lat1) * cos(lon1) + B * cos(lat2) * cos(lon2) // Calculate x coordinate\n| extend y = A * cos(lat1) * sin(lon1) + B * cos(lat2) * sin(lon2) // Calculate y coordinate\n| extend z = A * sin(lat1) + B * sin(lat2) // Calculate z coordinate\n| extend latitude = degrees(atan2(z, sqrt(x * x + y * y))) // Convert latitude back to degrees\n| extend latitude = iif(isnan(latitude), double(null), latitude)\n| extend longitude = degrees(atan2(y, x)) // Convert longitude back to degrees\n| extend longitude = iif(isnan(longitude), double(null), longitude)\n| extend longitude = (longitude + 540) % 360 - 180 // Normalize longitude to -180 to 180\n| project-away lat1, lon1, lat2, lon2, dLat, dLon, a, centralAngle, segment, fraction, A, B, x, y, z\n| evaluate python(\ntypeof(*, geojson_linestring:dynamic),\n```\ndef create_linestring(group):\n    points = [\n        [lon, lat] for lon, lat in zip(group[\"longitude\"], group[\"latitude\"])\n        if isinstance(lon, float) and isinstance(lat, float)\n    ]\n    return {\"type\": \"LineString\", \"coordinates\": points}\n\nresult_linestring = df.groupby(\"callsign\").apply(create_linestring).reset_index()\nresult_linestring.columns = [\"callsign\", \"geojson_linestring\"]\n\nresult = df.groupby(\"callsign\").first().reset_index()\nresult = result.join(result_linestring.set_index(\"callsign\"), on=\"callsign\")\n```\n)\n| project-away latitude, longitude","commandInContext":"let R = 6371000.0;  // Earth's radius in meters\nlet segments = 50;  // Number of segments\nBronzeCallsigns\n| extend bronze_timestamp = ingestion_time()\n| extend silver_timestamp = now()\n| extend airline_name = tostring(airline.name), airline_icao = tostring(airline.icao), airline_iata = tostring(airline.iata), airline_country = tostring(airline.country), airline_country_iso = tostring(airline.country_iso), airline_callsign = tostring(airline.callsign)\n| project-away airline\n| extend origin_country_iso_name = tostring(origin.country_iso_name), origin_country_name = tostring(origin.country_name), origin_elevation = todouble(origin.elevation), origin_iata_code = tostring(origin.iata_code), origin_icao_code = tostring(origin.icao_code), origin_latitude = todouble(origin.latitude), origin_longitude = todouble(origin.longitude), origin_municipality = tostring(origin.municipality), origin_name = tostring(origin.name)\n| project-away origin\n| extend destination_country_iso_name = tostring(destination.country_iso_name), destination_country_name = tostring(destination.country_name), destination_elevation = todouble(destination.elevation), destination_iata_code = tostring(destination.iata_code), destination_icao_code = tostring(destination.icao_code), destination_latitude = todouble(destination.latitude), destination_longitude = todouble(destination.longitude), destination_municipality = tostring(destination.municipality), destination_name = tostring(destination.name)\n| project-away destination, callsign_icao, callsign\n| extend callsign = id\n| project-away id\n| extend lat1 = todouble(origin_latitude) * pi() / 180  // Convert origin latitude to radians\n| extend lon1 = todouble(origin_longitude) * pi() / 180 // Convert origin longitude to radians\n| extend lat2 = todouble(destination_latitude) * pi() / 180 // Convert destination latitude to radians\n| extend lon2 = todouble(destination_longitude) * pi() / 180 // Convert destination longitude to radians\n| extend dLat = lat2 - lat1 // Latitude difference in radians\n| extend dLon = lon2 - lon1 // Longitude difference in radians\n| extend a = sin(dLat / 2) * sin(dLat / 2) + cos(lat1) * cos(lat2) * sin(dLon / 2) * sin(dLon / 2) // Haversine formula part 1\n| extend centralAngle = 2 * atan2(sqrt(a), sqrt(1 - a)) // Central angle\n| mv-expand segment = range(0, segments, 1) // Generate rows for each segment\n| extend fraction = todouble(segment) / segments // Calculate fraction for each segment\n| extend A = sin((1 - fraction) * centralAngle) / sin(centralAngle) // Weight A for interpolation\n| extend B = sin(fraction * centralAngle) / sin(centralAngle) // Weight B for interpolation\n| extend x = A * cos(lat1) * cos(lon1) + B * cos(lat2) * cos(lon2) // Calculate x coordinate\n| extend y = A * cos(lat1) * sin(lon1) + B * cos(lat2) * sin(lon2) // Calculate y coordinate\n| extend z = A * sin(lat1) + B * sin(lat2) // Calculate z coordinate\n| extend latitude = degrees(atan2(z, sqrt(x * x + y * y))) // Convert latitude back to degrees\n| extend latitude = iif(isnan(latitude), double(null), latitude)\n| extend longitude = degrees(atan2(y, x)) // Convert longitude back to degrees\n| extend longitude = iif(isnan(longitude), double(null), longitude)\n| extend longitude = (longitude + 540) % 360 - 180 // Normalize longitude to -180 to 180\n| project-away lat1, lon1, lat2, lon2, dLat, dLon, a, centralAngle, segment, fraction, A, B, x, y, z\n| evaluate python(\ntypeof(*, geojson_linestring:dynamic),\n```\ndef create_linestring(group):\n    points = [\n        [lon, lat] for lon, lat in zip(group[\"longitude\"], group[\"latitude\"])\n        if isinstance(lon, float) and isinstance(lat, float)\n    ]\n    return {\"type\": \"LineString\", \"coordinates\": points}\n\nresult_linestring = df.groupby(\"callsign\").apply(create_linestring).reset_index()\nresult_linestring.columns = [\"callsign\", \"geojson_linestring\"]\n\nresult = df.groupby(\"callsign\").first().reset_index()\nresult = result.join(result_linestring.set_index(\"callsign\"), on=\"callsign\")\n```\n)\n| project-away latitude, longitude","executionStatus":"done","clientRequestId":"Kusto.Web.RTA.QuerySet;5a6ac97d-55fc-4781-bca2-069f682cb81c;bfce2648-f79f-4d4a-acf1-d1c952a20ab2","entityInContext":"trd-kz4sd5vknmz3u5t26m.z2/ac257cd3-e45d-4c3c-a1d8-b4589541f6c8","commandType":"Query","commandWithoutLeadingComments":"let R = 6371000.0;  // Earth's radius in meters\nlet segments = 50;  // Number of segments\nBronzeCallsigns\n| extend bronze_timestamp = ingestion_time()\n| extend silver_timestamp = now()\n| extend airline_name = tostring(airline.name), airline_icao = tostring(airline.icao), airline_iata = tostring(airline.iata), airline_country = tostring(airline.country), airline_country_iso = tostring(airline.country_iso), airline_callsign = tostring(airline.callsign)\n| project-away airline\n| extend origin_country_iso_name = tostring(origin.country_iso_name), origin_country_name = tostring(origin.country_name), origin_elevation = todouble(origin.elevation), origin_iata_code = tostring(origin.iata_code), origin_icao_code = tostring(origin.icao_code), origin_latitude = todouble(origin.latitude), origin_longitude = todouble(origin.longitude), origin_municipality = tostring(origin.municipality), origin_name = tostring(origin.name)\n| project-away origin\n| extend destination_country_iso_name = tostring(destination.country_iso_name), destination_country_name = tostring(destination.country_name), destination_elevation = todouble(destination.elevation), destination_iata_code = tostring(destination.iata_code), destination_icao_code = tostring(destination.icao_code), destination_latitude = todouble(destination.latitude), destination_longitude = todouble(destination.longitude), destination_municipality = tostring(destination.municipality), destination_name = tostring(destination.name)\n| project-away destination, callsign_icao, callsign\n| extend callsign = id\n| project-away id\n| extend lat1 = todouble(origin_latitude) * pi() / 180  // Convert origin latitude to radians\n| extend lon1 = todouble(origin_longitude) * pi() / 180 // Convert origin longitude to radians\n| extend lat2 = todouble(destination_latitude) * pi() / 180 // Convert destination latitude to radians\n| extend lon2 = todouble(destination_longitude) * pi() / 180 // Convert destination longitude to radians\n| extend dLat = lat2 - lat1 // Latitude difference in radians\n| extend dLon = lon2 - lon1 // Longitude difference in radians\n| extend a = sin(dLat / 2) * sin(dLat / 2) + cos(lat1) * cos(lat2) * sin(dLon / 2) * sin(dLon / 2) // Haversine formula part 1\n| extend centralAngle = 2 * atan2(sqrt(a), sqrt(1 - a)) // Central angle\n| mv-expand segment = range(0, segments, 1) // Generate rows for each segment\n| extend fraction = todouble(segment) / segments // Calculate fraction for each segment\n| extend A = sin((1 - fraction) * centralAngle) / sin(centralAngle) // Weight A for interpolation\n| extend B = sin(fraction * centralAngle) / sin(centralAngle) // Weight B for interpolation\n| extend x = A * cos(lat1) * cos(lon1) + B * cos(lat2) * cos(lon2) // Calculate x coordinate\n| extend y = A * cos(lat1) * sin(lon1) + B * cos(lat2) * sin(lon2) // Calculate y coordinate\n| extend z = A * sin(lat1) + B * sin(lat2) // Calculate z coordinate\n| extend latitude = degrees(atan2(z, sqrt(x * x + y * y))) // Convert latitude back to degrees\n| extend latitude = iif(isnan(latitude), double(null), latitude)\n| extend longitude = degrees(atan2(y, x)) // Convert longitude back to degrees\n| extend longitude = iif(isnan(longitude), double(null), longitude)\n| extend longitude = (longitude + 540) % 360 - 180 // Normalize longitude to -180 to 180\n| project-away lat1, lon1, lat2, lon2, dLat, dLon, a, centralAngle, segment, fraction, A, B, x, y, z\n| evaluate python(\ntypeof(*, geojson_linestring:dynamic),\n```\ndef create_linestring(group):\n    points = [\n        [lon, lat] for lon, lat in zip(group[\"longitude\"], group[\"latitude\"])\n        if isinstance(lon, float) and isinstance(lat, float)\n    ]\n    return {\"type\": \"LineString\", \"coordinates\": points}\n\nresult_linestring = df.groupby(\"callsign\").apply(create_linestring).reset_index()\nresult_linestring.columns = [\"callsign\", \"geojson_linestring\"]\n\nresult = df.groupby(\"callsign\").first().reset_index()\nresult = result.join(result_linestring.set_index(\"callsign\"), on=\"callsign\")\n```\n)\n| project-away latitude, longitude","hideEmptyColumns":false,"cursorPosition":{"lineNumber":52,"column":35}}],"tabInContext":"7c920204-9dec-4f17-8320-a44969b4aac9","connections":{"trd-kz4sd5vknmz3u5t26m.z2":{"clusterType":"Engine","name":"trd-kz4sd5vknmz3u5t26m.z2","connectionString":"https://trd-kz4sd5vknmz3u5t26m.z2.kusto.fabric.microsoft.com","initialCatalog":"ac257cd3-e45d-4c3c-a1d8-b4589541f6c8","databases":{"trd-kz4sd5vknmz3u5t26m.z2/ac257cd3-e45d-4c3c-a1d8-b4589541f6c8":{"id":"trd-kz4sd5vknmz3u5t26m.z2/ac257cd3-e45d-4c3c-a1d8-b4589541f6c8","name":"ac257cd3-e45d-4c3c-a1d8-b4589541f6c8","prettyName":"eh","fetchState":"notStarted","fetchStateError":"","tables":{},"functions":{},"entityGroups":{},"accessMode":"ReadWrite","minorVersion":0,"majorVersion":9122}},"id":"trd-kz4sd5vknmz3u5t26m.z2","fetchState":"done","fetchStateError":"","tooBigToCache":true,"serviceOffering":"Trident"}}}}